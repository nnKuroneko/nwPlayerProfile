plugins {
    id 'java'
    id("com.gradleup.shadow") version "9.0.0-beta8"
}

shadowJar {
    relocate("dev.triumphteam.gui", "com.nwPlayerProfile.profile.gui")
}

group = 'com'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        url "https://repo.hibiscusmc.com/releases"
    }

    // PlaceholderAPI
    maven {
        url = uri("https://repo.extendedclip.com/content/repositories/placeholderapi/")
    }

    // MythicMobs
    maven {
        url = uri("https://mvn.lumine.io/repository/maven-public")
        metadataSources {
            artifact()
        }
    }

    // PlayerAnimator
    maven {
        url = uri("https://mvn.lumine.io/repository/maven/")
    }

    // Triumph GUI
    maven {
        url = uri("https://repo.triumphteam.dev/snapshots")
    }

    // Hibiscus Commons
    maven {
        url = uri("https://repo.hibiscusmc.com/releases")
    }

    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.21.1-R0.1-SNAPSHOT")
    compileOnly("com.hibiscusmc:HMCCosmetics:2.7.5-b516cfce")
    compileOnly("me.lojosho:HibiscusCommons:0.6.0-85d65299")
    implementation("dev.triumphteam:triumph-gui:3.1.12-SNAPSHOT") {
        exclude group: 'net.kyori'  // Exclude the entire net.kyori group
    }
    implementation("com.owen1212055:particlehelper:1.0.0-SNAPSHOT")
    implementation("com.ticxo.playeranimator:PlayerAnimator:R1.2.8")
    implementation("net.kyori:adventure-api:4.19.0")
    compileOnly("net.luckperms:api:5.4")
    compileOnly('net.citizensnpcs:citizens-main:2.0.35-SNAPSHOT') {
        exclude group: '*', module: '*'
    }

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
